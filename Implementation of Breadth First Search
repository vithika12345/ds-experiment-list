#include <stdio.h>
#include <stdlib.h>
#define MAX 99


// Write your code here...
typedef struct node {
    int vertex;
    struct node* next;
} *GNODE;

// Queue structure for BFS
int queue[MAX], front = -1, rear = -1;

// Graph and visited array
GNODE graph[MAX];
int visited[MAX];

// Enqueue function
void enqueue(int val) {
    if (rear == MAX - 1)
        return;
    if (front == -1)
        front = 0;
    queue[++rear] = val;
}

// Dequeue function
int dequeue() {
    if (front == -1 || front > rear)
        return -1;
    return queue[front++];
}

// BFS function
void BFS(int v) {
    GNODE temp;
    visited[v] = 1;
    enqueue(v);

    while (front <= rear) {
        int current = dequeue();
        printf("\n%d", current);

        for (temp = graph[current]; temp != NULL; temp = temp->next) {
            if (!visited[temp->vertex]) {
                visited[temp->vertex] = 1;
                enqueue(temp->vertex);
            }
        }
    }
}void main() {
	int n, E, s, d, i, j, v;
	GNODE p, q;
	printf("Enter no of vertices: ");
	scanf("%d",&n);
	printf("Enter no of edges: ");
	scanf("%d",&E);
	for(i=1;i<=E;i++) {
		printf("Enter source: ");
		scanf("%d",&s);
		printf("Enter destination: ");
		scanf("%d",&d);
		q=(GNODE)malloc(sizeof(struct node));
		q->vertex=d;
		q->next=NULL;
		if(graph[s]==NULL) {
			graph[s]=q;
		} else {
			p=graph[s];
			while(p->next!=NULL)
				p=p->next;
			p->next=q;
		}
	}
	for(i=1;i<=n;i++)
		visited[i]=0;
	printf("Enter Start Vertex for BFS: ");
	scanf("%d", &v);
	printf("BFS of graph: ");
	BFS(v);
	printf("\n");
}
